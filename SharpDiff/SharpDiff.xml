<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDiff</name>
    </assembly>
    <members>
        <member name="T:SharpDiff.AlignedDiffChange">
            <summary>
            This class holds a single collection from either the first or the second, or both,
            collections given to the <see cref="T:SharpDiff.AlignedDiff`1"/> class, along
            with the type of change that the elements produce.
            </summary>
        </member>
        <member name="M:SharpDiff.AlignedDiffChange.#ctor(SharpDiff.ChangeType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:SharpDiff.AlignedDiffChange"/>.
            </summary>
            <param name="change">
            The <see cref="P:SharpDiff.AlignedDiffChange.Change">type</see> of change this <see cref="T:SharpDiff.AlignedDiffChange"/> details.
            </param>
            <param name="index1">
            The index of the element from the first collection. If <paramref name="change"/> is <see cref="F:SharpDiff.ChangeType.Added"/>, then
            this parameter has no meaning.
            </param>
            <param name="index2">
            The index of the element from the second collection. If <paramref name="change"/> is <see cref="F:SharpDiff.ChangeType.Deleted"/>, then
            this parameter has no meaning.
            </param>
        </member>
        <member name="M:SharpDiff.AlignedDiffChange.Equals(SharpDiff.AlignedDiffChange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpDiff.AlignedDiffChange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpDiff.AlignedDiffChange.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpDiff.AlignedDiffChange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SharpDiff.AlignedDiffChange.Change">
            <summary>
            The <see cref="P:SharpDiff.AlignedDiffChange.Change">type</see> of change this <see cref="T:SharpDiff.AlignedDiffChange"/> details.
            </summary>
        </member>
        <member name="P:SharpDiff.AlignedDiffChange.Index1">
            <summary>
            The element from the first collection. If <see cref="T:System.Type"/> is <see cref="F:SharpDiff.ChangeType.Added"/>, then
            the value of this property has no meaning.
            </summary>
        </member>
        <member name="P:SharpDiff.AlignedDiffChange.Index2">
            <summary>
            The element from the second collection. If <see cref="T:System.Type"/> is <see cref="F:SharpDiff.ChangeType.Deleted"/>, then
            the value of this property has no meaning.
            </summary>
        </member>
        <member name="T:SharpDiff.ChangeType">
            <summary>
            This enum is used by <see cref="T:SharpDiff.AlignedDiffChange"/> to specify how
            the two elements from the two collections relate.
            </summary>
        </member>
        <member name="F:SharpDiff.ChangeType.Same">
            <summary>
            The two elements are the same.
            </summary>
        </member>
        <member name="F:SharpDiff.ChangeType.Added">
            <summary>
            The second element was added in the second collection.
            </summary>
        </member>
        <member name="F:SharpDiff.ChangeType.Deleted">
            <summary>
            The first element was removed from the second collection.
            </summary>
        </member>
        <member name="F:SharpDiff.ChangeType.Changed">
            <summary>
            The first element was changed/replaced with the second element in the second collection.
            </summary>
        </member>
        <member name="T:SharpDiff.Diff3">
            <summary>
            This class provides a 3-ways diff between 3 collections. 
            </summary>
        </member>
        <member name="M:SharpDiff.Diff3.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares the three collections and generate a 3-ways diff using a default comparer for T.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="baseCollection">The base collection.</param>
            <param name="modified1">The collection modified 1.</param>
            <param name="modified2">The collection modified 2.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff3Change"/>.</returns>
        </member>
        <member name="M:SharpDiff.Diff3.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares the three collections and generate a 3-ways diff.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="baseCollection">The base collection.</param>
            <param name="modified1">The collection modified 1.</param>
            <param name="modified2">The collection modified 2.</param>
            <param name="comparer">The comparer.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff3Change"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            baseCollection
            or
            modified1
            or
            modified2
            </exception>
        </member>
        <member name="M:SharpDiff.Diff3.Compare``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Compares the three collections and generate a 3-ways diff using a default comparer for T.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="baseCollection">The base collection.</param>
            <param name="modified1">The collection modified 1.</param>
            <param name="modified2">The collection modified 2.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff3Change"/>.</returns>
        </member>
        <member name="M:SharpDiff.Diff3.Compare``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares the three collections and generate a 3-ways diff.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="baseCollection">The base collection.</param>
            <param name="modified1">The modified1.</param>
            <param name="modified2">The modified2.</param>
            <param name="comparer">The comparer.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff3Change"/>.</returns>
            <exception cref="T:System.ArgumentNullException">comparer</exception>
        </member>
        <member name="T:SharpDiff.Diff2">
            <summary>
            This class provides a diff algorithm between 2 collections.
            </summary>
            <remarks>
            This class is the main entry point to perform diff comparisons between 2 collections. 
            It provides methods for a basic diff algorithm by recursively applying the Longest Common Substring 
            on pieces of the collections, and reporting sections that are similar, and those that are not,
            in the appropriate sequence.
            </remarks>
        </member>
        <member name="M:SharpDiff.Diff2.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares the two collections and generate a diff using a default comparer for T.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff2Change"/>.</returns>
        </member>
        <member name="M:SharpDiff.Diff2.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares the two collections and generate a diff.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <param name="comparer">The comparer.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff2Change"/>.</returns>
        </member>
        <member name="M:SharpDiff.Diff2.Compare``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Compares the two collections and generate a diff using a default comparer for T.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff2Change"/>.</returns>
        </member>
        <member name="M:SharpDiff.Diff2.Compare``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares the two collections and generate a diff.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="left">The first collection.</param>
            <param name="right">The second collection.</param>
            <param name="comparer">The comparer.</param>
            <returns>An enumeration of <see cref="T:SharpDiff.Diff2Change"/>.</returns>
        </member>
        <member name="M:SharpDiff.Diff2.CompareAndAlign``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},SharpDiff.ISimilarityComparer{``0},SharpDiff.IAlignmentFilter{``0})">
            <summary>
            Compares the two collections and generate a diff by attempting to align similar individual elements inside
            replace-blocks.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <param name="similarityComparer">
            The <see cref="T:SharpDiff.ISimilarityComparer`1"/> that will be used to attempt to align elements
            inside blocks that consists of elements from the first collection being replaced
            with elements from the second collection.
            </param>
            <param name="alignmentFilter">
            The <see cref="T:SharpDiff.ISimilarityComparer`1"/> that will be used to determine if
            two aligned elements are similar enough to be report them as a change from
            one to another, or to report them as one being deleted and the other added in
            its place.
            </param>
            <returns>
            A collection of <see cref="T:SharpDiff.AlignedDiffChange"/> objects, one for
            each element in the list in the first or second collection (sometimes one instance for a line
            from both, when lines are equal or similar.)
            </returns>
        </member>
        <member name="M:SharpDiff.Diff2.CompareAndAlign``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0},SharpDiff.ISimilarityComparer{``0},SharpDiff.IAlignmentFilter{``0})">
            <summary>
            Compares the two collections and generate a diff by attempting to align similar individual elements inside
            replace-blocks.
            </summary>
            <typeparam name="T">Type of the element in the list</typeparam>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare elements from
            <paramref name="first"/> with elements from <paramref name="second"/>.
            </param>
            <param name="similarityComparer">
            The <see cref="T:SharpDiff.ISimilarityComparer`1"/> that will be used to attempt to align elements
            inside blocks that consists of elements from the first collection being replaced
            with elements from the second collection.
            </param>
            <param name="alignmentFilter">
            The <see cref="T:SharpDiff.ISimilarityComparer`1"/> that will be used to determine if
            two aligned elements are similar enough to be report them as a change from
            one to another, or to report them as one being deleted and the other added in
            its place.
            </param>
            <returns>
            A collection of <see cref="T:SharpDiff.AlignedDiffChange"/> objects, one for
            each element in the list in the first or second collection (sometimes one instance for a line
            from both, when lines are equal or similar.)
            </returns>
        </member>
        <member name="T:SharpDiff.Diff2`1">
            <summary>
            This class provides a diff algorithm between 2 collections.
            </summary>
            <typeparam name="T">
            The types of elements in the collections being compared.
            </typeparam>
        </member>
        <member name="M:SharpDiff.Diff2`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of <see cref="T:SharpDiff.Diff2"/>
            using the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance for the
            <typeparamref name="T"/> type.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:SharpDiff.Diff2`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of <see cref="T:SharpDiff.Diff2"/>.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare elements from
            <paramref name="collection1"/> with elements from <paramref name="collection2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="comparer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:SharpDiff.Diff2`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpDiff.Diff2`1.Generate">
            <summary>
            Generates the diff between the two collections.
            </summary>
        </member>
        <member name="T:SharpDiff.Diff3Change">
            <summary>
            A diff3 change.
            </summary>
        </member>
        <member name="M:SharpDiff.Diff3Change.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDiff.Diff3Change"/> class.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3Change.Base">
            <summary>
            The span for the changes from base.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3Change.From1">
            <summary>
            The span for the changes from list1.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3Change.From2">
            <summary>
            The span for the changes from list2.
            </summary>
        </member>
        <member name="M:SharpDiff.Diff3Change.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:SharpDiff.Diff3Change.ChangeType">
            <summary>
            Gets or sets the type of the change.
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="P:SharpDiff.Diff3Change.CanMerge">
            <summary>
            Gets a value indicating whether this diff3 can be merged.
            </summary>
            <value><c>true</c> if this diff3 can be merged; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpDiff.Diff2Change">
            <summary>
            This class contains a single section of diff output from the <see cref="M:SharpDiff.Diff2.Compare``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})"/>
            method.
            </summary>
        </member>
        <member name="M:SharpDiff.Diff2Change.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:SharpDiff.Diff2Change"/>.
            </summary>
            <param name="equal">
            If <c>true</c>, then the section specifies a section from the first
            collection that is equal to a section from the second collection;
            otherwise, if <c>false</c>, then the section from the first
            collection was replaced with the section from the second collection.
            </param>
            <param name="length1">
            The length of the section in the first collection. Can be 0 if
            the section specifies that new content was added in the second
            collection.
            </param>
            <param name="length2">
            The length of the section in the second collection. Can be 0 if
            the section specifies that old content was deleted in the second
            collection.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="length1"/> is negative.</para>
            <para>- or -</para>
            <para><paramref name="length2"/> is negative.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="equal"/> is <c>true</c> but <paramref name="length1"/> is not equal to <paramref name="length2"/>.</para>
            </exception>
        </member>
        <member name="M:SharpDiff.Diff2Change.Equals(SharpDiff.Diff2Change)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpDiff.Diff2Change.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpDiff.Diff2Change.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpDiff.Diff2Change.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpDiff.Diff2Change.op_Equality(SharpDiff.Diff2Change,SharpDiff.Diff2Change)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDiff.Diff2Change.op_Inequality(SharpDiff.Diff2Change,SharpDiff.Diff2Change)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:SharpDiff.Diff2Change.Equal">
            <summary>
            Gets whether the <see cref="T:SharpDiff.Diff2Change"/> specifies equal sections in the two
            collections, or differing sections.
            </summary>
            <value>
            If <c>true</c>, then the section specifies a section from the first
            collection that is equal to a section from the second collection;
            otherwise, if <c>false</c>, then the section from the first
            collection was replaced with the section from the second collection.
            </value>
        </member>
        <member name="P:SharpDiff.Diff2Change.Length1">
            <summary>
            The length of the section in the first collection.
            </summary>
        </member>
        <member name="P:SharpDiff.Diff2Change.Length2">
            <summary>
            The length of the section in the second collection.
            </summary>
        </member>
        <member name="T:SharpDiff.Diff3ChangeType">
            <summary>
            A diff3 change type.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3ChangeType.Equal">
            <summary>
            The values are equal between base, v1 and v2.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3ChangeType.MergeFrom1">
            <summary>
            The value can be merged from v1.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3ChangeType.MergeFrom2">
            <summary>
            The value can be merged from v2.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3ChangeType.MergeFrom1And2">
            <summary>
            The value can be merged from v1 and v2.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3ChangeType.MergeFromBase">
            <summary>
            The value can be merged from base.
            </summary>
        </member>
        <member name="F:SharpDiff.Diff3ChangeType.Conflict">
            <summary>
            The value are different between base, v1 and v2.
            </summary>
        </member>
        <member name="T:SharpDiff.IAlignmentFilter`1">
            <summary>
            This interface must be implemented by classes that will do similarity-filtering
            during alignment (<see cref="T:SharpDiff.AlignedDiff`1"/>) to determine
            if two aligned elements are similar enough to report
            them as a change, instead of as a delete plus an add.
            </summary>
            <typeparam name="T">
            The type of elements being compared.
            </typeparam>
        </member>
        <member name="M:SharpDiff.IAlignmentFilter`1.CanAlign(`0,`0)">
            <summary>
            Determines if the two values are similar enough to align them
            as a change, instead of not aligning them but reporting them
            as a delete plus an add instead.
            </summary>
            <param name="value1">
            The first value to compare against <paramref name="value2"/>.
            </param>
            <param name="value2">
            The second value to compare against <paramref name="value1"/>.
            </param>
            <returns>
            <c>true</c> if the two values are similar enough to report
            them as a change; false if the two values aren't similar enough
            but needs to be reported as a delete plus an add.
            </returns>
        </member>
        <member name="T:SharpDiff.ISimilarityComparer`1">
            <summary>
            This interface must be implemented by classes that will do similarity-calculation
            for use with the <see cref="T:SharpDiff.AlignedDiff`1"/> class.
            </summary>
            <typeparam name="T">
            The type of elements being compared.
            </typeparam>
        </member>
        <member name="M:SharpDiff.ISimilarityComparer`1.Compare(`0,`0)">
            <summary>
            Does a similarity comparison between the two values and returns their
            similarity, a value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </summary>
            <param name="value1">
            The first value to compare.
            </param>
            <param name="value2">
            The second value to compare.
            </param>
            <returns>
            A value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </returns>
        </member>
        <member name="T:SharpDiff.LongestCommonSubstring`1">
            <summary>
            This class implements the LCS algorithm, to find the longest common substring that exists
            in two collections, and return the locations of those substrings.
            </summary>
            <typeparam name="T">
            The types of elements in the collections being compared.
            </typeparam>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstring`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDiff.LongestCommonSubstring`1"/> class
            using the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance for the
            <typeparamref name="T"/> type.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstring`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDiff.LongestCommonSubstring`1"/> class.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare elements from
            <paramref name="collection1"/> with elements from <paramref name="collection2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="comparer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstring`1.Find">
            <summary>
            Finds the longest common substring and returns its position in the two collections, and
            its length, or <c>null</c> if no such common substring can be located.
            </summary>
            <returns>
            A <see cref="T:SharpDiff.LongestCommonSubstringResult"/> containing the positions of the two substrings, one position
            for each collection, both 0-based, and the length of the substring. If no common substring can be found, <c>null</c>
            will be returned.
            </returns>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstring`1.Find(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the longest common substring and returns its position in the two collections, and
            its length, or <c>null</c> if no such common substring can be located.
            </summary>
            <param name="lower1">
            The starting position in the first collection, 0-based. Included in the search.
            </param>
            <param name="upper1">
            The ending position in the first collection, 0-based. <b>Not</b> included in the search.
            </param>
            <param name="lower2">
            The starting position in the second collection, 0-based. Included in the search.
            </param>
            <param name="upper2">
            The ending position in the second collection, 0-based. <b>Not</b> included in the search.
            </param>
            <returns>
            A <see cref="T:SharpDiff.LongestCommonSubstringResult"/> containing the positions of the two substrings, one position
            for each collection, both 0-based, and the length of the substring. If no common substring can be found, <c>null</c>
            will be returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="lower1"/> is less than 0.</para>
            <para>- or -</para>
            <para><paramref name="lower1"/> is greater than <paramref name="upper1"/>.</para>
            <para>- or -</para>
            <para><paramref name="upper1"/> is greater than the length of the first collection.</para>
            <para>- or -</para>
            <para><paramref name="lower2"/> is less than 0.</para>
            <para>- or -</para>
            <para><paramref name="lower2"/> is greater than <paramref name="upper2"/>.</para>
            <para>- or -</para>
            <para><paramref name="upper2"/> is greater than the length of the second collection.</para>
            </exception>
        </member>
        <member name="T:SharpDiff.LongestCommonSubstringResult">
            <summary>
            This class holds the result of calling <see cref="M:SharpDiff.LongestCommonSubstring`1.Find"/>.
            </summary>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstringResult.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:SharpDiff.LongestCommonSubstringResult"/>.
            </summary>
            <param name="positionInCollection1">
            The position in the first collection, 0-based.
            </param>
            <param name="positionInCollection2">
            The position in the second collection, 0-based.
            </param>
            <param name="length">
            The length of the common substring.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="positionInCollection1"/> is negative.</para>
            <para>- or -</para>
            <para><paramref name="positionInCollection2"/> is negative.</para>
            <para>- or -</para>
            <para><paramref name="length"/> is zero or negative.</para>
            </exception>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstringResult.Equals(SharpDiff.LongestCommonSubstringResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstringResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstringResult.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpDiff.LongestCommonSubstringResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SharpDiff.LongestCommonSubstringResult.PositionInCollection1">
            <summary>
            The position in the first collection, 0-based.
            </summary>
        </member>
        <member name="P:SharpDiff.LongestCommonSubstringResult.PositionInCollection2">
            <summary>
            The position in the second collection, 0-based.
            </summary>
        </member>
        <member name="P:SharpDiff.LongestCommonSubstringResult.Length">
            <summary>
            The length of the common substring.
            </summary>
        </member>
        <member name="T:SharpDiff.AlignedDiff`1">
            <summary>
            This class implements a slightly more advanced diff algorithm than <see cref="T:SharpDiff.Diff2"/> by
            taking the output from <see cref="T:SharpDiff.Diff2"/> and attempting to align individual elements inside
            replace-blocks. This is mostly suitable for text file diffs.
            </summary>
            <typeparam name="T">
            The types of elements in the collections being compared.
            </typeparam>
        </member>
        <member name="M:SharpDiff.AlignedDiff`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0},SharpDiff.ISimilarityComparer{`0},SharpDiff.IAlignmentFilter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:SharpDiff.AlignedDiff`1"/>.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare elements from
            <paramref name="collection1"/> with elements from <paramref name="collection2"/>.
            </param>
            <param name="similarityComparer">
            The <see cref="T:SharpDiff.ISimilarityComparer`1"/> that will be used to attempt to align elements
            inside blocks that consists of elements from the first collection being replaced
            with elements from the second collection.
            </param>
            <param name="alignmentFilter">
            The <see cref="T:SharpDiff.ISimilarityComparer`1"/> that will be used to determine if
            two aligned elements are similar enough to be report them as a change from
            one to another, or to report them as one being deleted and the other added in
            its place.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="equalityComparer"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="alignmentFilter"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:SharpDiff.AlignedDiff`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpDiff.AlignedDiff`1.Generate">
            <summary>
            Generates the diff, one line of output at a time.
            </summary>
            <returns>
            A collection of <see cref="T:SharpDiff.AlignedDiffChange"/> objects, one for
            each line in the first or second collection (sometimes one instance for a line
            from both, when lines are equal or similar.)
            </returns>
        </member>
        <member name="T:SharpDiff.Span">
            <summary>
            A span defining a region in a list.
            </summary>
        </member>
        <member name="F:SharpDiff.Span.Invalid">
            <summary>
            An invalid span.
            </summary>
        </member>
        <member name="M:SharpDiff.Span.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDiff.Span"/> struct.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="F:SharpDiff.Span.From">
            <summary>
            The index "from" in the list (inclusive).
            </summary>
        </member>
        <member name="F:SharpDiff.Span.To">
            <summary>
            The index "to" in the list (inclusive).
            </summary>
        </member>
        <member name="M:SharpDiff.Span.CanMergeWith(SharpDiff.Span)">
            <summary>
            Determines whether this instance can be merged with the specified span.
            </summary>
            <param name="against">The against.</param>
            <returns><c>true</c> if this instance can be merged with the specified span; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDiff.Span.Merge(SharpDiff.Span,SharpDiff.Span)">
            <summary>
            Merges the specified spans.
            </summary>
            <param name="source">The source span.</param>
            <param name="against">The against span.</param>
            <returns>A merged span or an <see cref="F:SharpDiff.Span.Invalid"/> span if merge is impossible.</returns>
        </member>
        <member name="M:SharpDiff.Span.Equals(SharpDiff.Span)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:SharpDiff.Span.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDiff.Span.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:SharpDiff.Span.op_Equality(SharpDiff.Span,SharpDiff.Span)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDiff.Span.op_Inequality(SharpDiff.Span,SharpDiff.Span)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDiff.Span.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:SharpDiff.Span.Length">
            <summary>
            Gets the length of this span.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SharpDiff.Span.IsValid">
            <summary>
            Gets a value indicating whether this span is valid (a length > 0)
            </summary>
            <value><c>true</c> if this span is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpDiff.StringSimilarityComparer">
            <summary>
            This class implements <see cref="T:SharpDiff.ISimilarityComparer`1"/> for strings, doing a very basic "diff" between the two,
            and calculating how much of the text occurs in both.
            </summary>
        </member>
        <member name="M:SharpDiff.StringSimilarityComparer.Compare(System.String,System.String)">
            <summary>
            Does a similarity comparison between the two values and returns their
            similarity, a value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </summary>
            <param name="value1">
            The first value to compare.
            </param>
            <param name="value2">
            The second value to compare.
            </param>
            <returns>
            A value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </returns>
        </member>
        <member name="T:SharpDiff.StringAlignmentFilter">
            <summary>
            This class implements <see cref="T:SharpDiff.ISimilarityComparer`1"/> for strings, doing a very basic "diff" between the two,
            and calculating how much of the text occurs in both.
            </summary>
        </member>
        <member name="M:SharpDiff.StringAlignmentFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDiff.StringAlignmentFilter"/> class.
            </summary>
        </member>
        <member name="M:SharpDiff.StringAlignmentFilter.#ctor(SharpDiff.StringSimilarityFilterPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDiff.StringAlignmentFilter"/> class.
            </summary>
            <param name="diffPredicate">
            The diff predicate used to determine if the strings are
            similar enough (see <see cref="T:SharpDiff.StringSimilarityFilterPredicate"/> for details.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="diffPredicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SharpDiff.StringAlignmentFilter.CanAlign(System.String,System.String)">
            <summary>
            Determines if the two values are similar enough to align them
            as a change, instead of not aligning them but reporting them
            as a delete plus an add instead.
            </summary>
            <param name="value1">
            The first value to compare against <paramref name="value2"/>.
            </param>
            <param name="value2">
            The second value to compare against <paramref name="value1"/>.
            </param>
            <returns>
            <c>true</c> if the two values are similar enough to report
            them as a change; false if the two values aren't similar enough
            but needs to be reported as a delete plus an add.
            </returns>
        </member>
        <member name="T:SharpDiff.StringSimilarityFilterPredicate">
            <summary>
            This delegate is used by <see cref="T:SharpDiff.StringAlignmentFilter"/> to
            determine if the two strings are similar enough to report them
            as a change, instead of as a delete plus and add.
            </summary>
            <param name="value1">
            The first string to compare.
            </param>
            <param name="value2">
            The second string to compare.
            </param>
            <param name="diff">
            The diff between <paramref name="value1"/> and <paramref name="value2"/>.
            </param>
            <returns>
            <c>true</c> if the strings are similar enough (reported as a change);
            otherwise, <c>false</c> (reported as a delete plus an add.)
            </returns>
        </member>
    </members>
</doc>
